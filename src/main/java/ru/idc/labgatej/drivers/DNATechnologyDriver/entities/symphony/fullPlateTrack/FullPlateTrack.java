package ru.idc.labgatej.drivers.DNATechnologyDriver.entities.symphony.fullPlateTrack;

import lombok.Data;
import sun.plugin2.message.Message;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.List;

@Data
@XmlRootElement(name = "FullPlateTrack")
@XmlAccessorType(value = XmlAccessType.FIELD)
public class FullPlateTrack
{
    /**
     * ID of the eluate rack described by the result file. This can be its bar
     * code, a user-defined ID, or an ID generated by the device.
     */
    @XmlElement(name = "PlateID")
    String plateID;

    /**
     * Type of the eluate rack described by this result file.
     */
    @XmlElement(name = "RackType")
    String rackType;

    /**
     * The number of cols of the eluate rack.
     */
    @XmlElement(name = "NofCols")
    String nofCols ;

    /**
     * The number of rows of the eluate rack.
     */
    @XmlElement(name = "NofRows")
    String nofRows;

    /**
     * Slot number of the eluate drawer that the eluate rack is placed on.
     */
    @XmlElement(name = "SlotNo")
    String slotNo;

    /**
     * Time that the eluate rack was placed on the device.
     */
    @XmlElement(name = "LoadingTime")
    String loadingTime;

    /**
     * ID of the user who loaded the rack.
     */
    @XmlElement(name = "LoadedByOperator")
    String loadedByOperator;

    /**
     * Time that the eluate rack was removed from the device.
     */
    @XmlElement(name = "RemoveTime")
    String removeTime;

    /**
     * ID of the user who removed the rack.
     */
    @XmlElement(name = "RemovedByOperator")
    String removedByOperator;

    /**
     * Time stamp the first batch of the run was started.
     */
    @XmlElement(name = "startOfFirstBatch")
    String startOfFirstBatch ;

    /**
     * Time the last batch finished (by completion or cancellation).
     */
    @XmlElement(name = "EndOfLastBatch")
    String endOfLastBatch ;

    /**
     * Serial number of the device used to process the eluates.
     */
    @XmlElement(name = "Instrument")
    String instrument;

    /**
     * Software version that created the result file. A string of the form
     * X.Y.Z where X, Y, and Z denote the major version, minor version, and the
     * revision number, e.g., “5.0.3”.
     */
    @XmlElement(name = "SoftwareVersion")
    String SoftwareVersion;

    /**
     * ID of the process configuration profile used to generate the current
     * configuration. For manual changes to a profile without saving, the
     * documented ID is “None”.
     */
    @XmlElement(name = "ProcessConfigurationProfile")
    String processConfigurationProfile;

    /**
     * Name of the result file, (includes full path).
     */
    @XmlElement(name = "Filename")
    String filename;

    /**
     * Not used.
     */
    @XmlElement(name = "EluateCooling")
    String eluateCooling;

    /**
     * Average eluate temperature during the cooling period.
     */
    @XmlElement(name = "AverageEluateTemperature")
    String averageEluateTemperature;

    /**
     * “Passed” if all samples that are documented in this result file are
     * "valid". “Failed” if at least one sample is “invalid”. “Unclear” if at
     * least one sample is “unclear” and neither is “invalid”.
     */
    @XmlElement(name = "AllSamplesOK")
    String allSamplesOK;

    /**
     * One BatchTrack exists for each batch that used the eluate plate. See
     * “BatchTrack”, page 17.
     */
    @XmlElement(name = "BatchTrack")
    List<BatchTrack> batchTrack;

    /**
     * See “BatchTrack/ProcessStepResult”, in Table 5, page 18.
     */
    @XmlElement(name = "ProcessStepResult")
    List<ProcessStepResult> processStepResult;

    /**
     * One ReagentRackTrack per reagent rack. A reagent rack is a reagent box, a
     * buffer bottle, or an accessory trough. See “ReagentRackTrack”, page 31.
     */
    @XmlElement(name = "ReagentRackTrack")
    List<ReagentRackTrack> reagentRackTrack;

    /**
     * One InternalControlTrack per IC. See “InternalControlTrack”, page 35.
     */
    @XmlElement(name = "InternalControlTrack")
    List<InternalControlTrack> internalControlTrack;

    /**
     * Important messages and events during the run.
     */
    @XmlElement(name = "Message")
    List<Message> message;
}
